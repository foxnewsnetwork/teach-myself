{"version":3,"sources":["webpack:///./src/components/UserInfo/index.jsx","webpack:///./src/components/Disqus/index.jsx","webpack:///./src/components/PostInfo/index.jsx","webpack:///./src/components/SocialLinks/index.jsx","webpack:///./src/components/PostSuggestions/index.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./src/components/SEO/index.jsx","webpack:///./src/components/PostCover/PostCoverComponent.jsx","webpack:///./src/components/PostCover/index.jsx"],"names":["components_UserInfo","render","_this$props$config","this","props","config","userAvatar","userName","userLocation","userDescription","userLinks","userTwitter","expanded","userLinksElement","react_default","a","createElement","UserLinks","labeled","Card_default","className","CardTitle_default","expander","avatar","Avatars_default","src","role","title","subtitle","dist","username","options","count","CardText_default","expandable","IconSeparator_default","label","iconBefore","FontIcons_default","iconClassName","react","components_Disqus","Disqus","_this","_Component","call","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","_this$props","postNode","SiteConfig_default","disqusShortname","post","frontmatter","url","url_join_default","siteUrl","pathPrefix","fields","slug","icon","main_default","shortname","identifier","category_id","onNewComment","Snackbars_default","onDismiss","components_PostInfo","moment_default","date","format","dateFormat","timeToRead","gatsby_browser_entry","to","kebabCase_default","category","components_SocialLinks","postPath","mobile","iconSize","renderShareCount","filter","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","GooglePlusShareButton","GooglePlusIcon","GooglePlusShareCount","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","LinkedinShareButton","description","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","components_PostSuggestions_PostSuggestions","postFields","prevSlug","forceFontSize","forceSize","prevTitle","nextSlug","nextTitle","post_PostTemplate","PostTemplate","_React$Component","handleResize","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","pageContext","postOverlapClass","data","markdownRemark","id","postDefaultCategoryID","coverHeight","layout","location","Helmet_default","siteTitle","rel","href","SEO","postSEO","PostCover","coverClassName","Cards_default","dangerouslySetInnerHTML","__html","html","PostTags","tags","Component","pageQuery","react__WEBPACK_IMPORTED_MODULE_2___default","map","tag","gatsby__WEBPACK_IMPORTED_MODULE_3__","key","style","textDecoration","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","react__WEBPACK_IMPORTED_MODULE_2__","__webpack_exports__","image","postURL","postMeta","cover","url_join__WEBPACK_IMPORTED_MODULE_3___default","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_4___default","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","type","JSON","stringify","property","siteFBAppID","react__WEBPACK_IMPORTED_MODULE_1__","PostCoverComponent","fileEdges","coverNodeList","fileNode","node","childImageSharp","absolutePath","indexOf","path_browserify_default","join","length","gatsby_image_default","fluid","outerWrapperClassName","height","width","coverURL","substring","backgroundImage","PostCover_queryWrapper","query","allFile","edges","_590853412"],"mappings":"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","file":"component---src-templates-post-jsx-9cf87f1bc7566e0db402.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport IconSeparator from \"react-md/lib/Helpers/IconSeparator\";\nimport { Follow } from \"react-twitter-widgets\";\nimport UserLinks from \"../UserLinks\";\nimport \"./UserInfo.scss\";\n\nclass UserInfo extends Component {\n  render() {\n    const {\n      userAvatar,\n      userName,\n      userLocation,\n      userDescription,\n      userLinks,\n      userTwitter\n    } = this.props.config;\n    const { expanded } = this.props;\n    const userLinksElement = (\n      <UserLinks config={this.props.config} labeled={expanded} />\n    );\n    if (!userAvatar && !userName && !userLocation && !userDescription) {\n      if (userLinks) {\n        return (\n          <Card className=\"md-grid md-cell md-cell--12 user-info\">\n            {userLinksElement}\n          </Card>\n        );\n      }\n      return null;\n    }\n    return (\n      <Card className=\"md-grid md-cell md-cell--12 user-info\">\n        <CardTitle\n          expander={!expanded}\n          avatar={userAvatar && <Avatar src={userAvatar} role=\"presentation\" />}\n          title={userName && userName}\n          subtitle={\n            userTwitter ? (\n              <Follow\n                username={userTwitter}\n                options={{ count: expanded ? \"none\" : \"none\" }}\n              />\n            ) : (\n              \"Author\"\n            )\n          }\n        />\n        <CardText expandable={!expanded}>\n          {userLocation && (\n            <IconSeparator label={userLocation} iconBefore>\n              <FontIcon iconClassName=\"fa fa-map-marker\" />\n            </IconSeparator>\n          )}\n          <p>{userDescription && userDescription}</p>\n          {userLinksElement}\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default UserInfo;\n","import React, { Component } from \"react\";\nimport ReactDisqusComments from \"react-disqus-comments\";\nimport urljoin from \"url-join\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Snackbar from \"react-md/lib/Snackbars\";\nimport config from \"../../../data/SiteConfig\";\n\nclass Disqus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toasts: []\n    };\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\n  }\n\n  onSnackbarDismiss() {\n    const [, ...toasts] = this.state.toasts;\n    this.setState({ toasts });\n  }\n  notifyAboutComment() {\n    const toasts = this.state.toasts.slice();\n    toasts.push({ text: \"New comment available!\" });\n    this.setState({ toasts });\n  }\n  render() {\n    const { postNode, expanded } = this.props;\n    if (!config.disqusShortname) {\n      return null;\n    }\n    const post = postNode.frontmatter;\n    const url = urljoin(\n      config.siteUrl,\n      config.pathPrefix,\n      postNode.fields.slug\n    );\n\n    return (\n      <Card className=\"md-grid md-cell md-cell--12\">\n        <CardTitle\n          title=\"Comments\"\n          avatar={<Avatar icon={<FontIcon>comment</FontIcon>} />}\n          expander={!expanded}\n        />\n        <CardText expandable={!expanded}>\n          <ReactDisqusComments\n            shortname={config.disqusShortname}\n            identifier={post.title}\n            title={post.title}\n            url={url}\n            category_id={post.category_id}\n            onNewComment={this.notifyAboutComment}\n          />\n        </CardText>\n        <Snackbar\n          toasts={this.state.toasts}\n          onDismiss={this.onSnackbarDismiss}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default Disqus;\n","import React, { Component } from \"react\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostInfo.scss\";\n\nclass PostInfo extends Component {\n  render() {\n    const { postNode } = this.props;\n    const post = postNode.frontmatter;\n    return (\n      <div className=\"post-info\">\n        <CardTitle\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${moment(postNode.fields.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`${postNode.timeToRead} min read`}\n        />\n        <Link\n          className=\"category-link\"\n          to={`/categories/${_.kebabCase(post.category)}`}\n        >\n          <CardTitle\n            avatar={\n              <Avatar icon={<FontIcon iconClassName=\"fa fa-folder-open\" />} />\n            }\n            title=\"In category\"\n            subtitle={post.category}\n          />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default PostInfo;\n","import React, { Component } from \"react\";\nimport {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  RedditShareButton,\n  FacebookShareCount,\n  GooglePlusShareCount,\n  LinkedinShareCount,\n  RedditShareCount,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  GooglePlusIcon,\n  LinkedinIcon,\n  RedditIcon\n} from \"react-share\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./SocialLinks.scss\";\n\nclass SocialLinks extends Component {\n  render() {\n    const { postNode, postPath, mobile } = this.props;\n    const post = postNode.frontmatter;\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    const iconSize = mobile ? 36 : 48;\n    const filter = count => (count > 0 ? count : \"\");\n    const renderShareCount = count => (\n      <div className=\"share-count\">{filter(count)}</div>\n    );\n\n    return (\n      <div className=\"social-links\">\n        <RedditShareButton url={url} title={post.title}>\n          <RedditIcon round size={iconSize} />\n          <RedditShareCount url={url}>\n            {count => renderShareCount(count)}\n          </RedditShareCount>\n        </RedditShareButton>\n        <TwitterShareButton url={url} title={post.title}>\n          <TwitterIcon round size={iconSize} />\n        </TwitterShareButton>\n        <GooglePlusShareButton url={url}>\n          <GooglePlusIcon round size={iconSize} />\n          <GooglePlusShareCount url={url}>\n            {count => renderShareCount(count)}\n          </GooglePlusShareCount>\n        </GooglePlusShareButton>\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\n          <FacebookIcon round size={iconSize} />\n          <FacebookShareCount url={url}>\n            {count => renderShareCount(count)}\n          </FacebookShareCount>\n        </FacebookShareButton>\n        <LinkedinShareButton\n          url={url}\n          title={post.title}\n          description={postNode.excerpt}\n        >\n          <LinkedinIcon round size={iconSize} />\n          <LinkedinShareCount url={url}>\n            {count => renderShareCount(count)}\n          </LinkedinShareCount>\n        </LinkedinShareButton>\n        <TelegramShareButton url={url}>\n          <TelegramIcon round size={iconSize} />\n        </TelegramShareButton>\n      </div>\n    );\n  }\n}\n\nexport default SocialLinks;\n","import React, { Component } from \"react\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport \"./PostSuggestions.scss\";\n\nexport default class PostSuggestions extends Component {\n  render() {\n    const { postNode } = this.props;\n    const postFields = postNode.fields;\n    return (\n      <div className=\"post-suggestions md-grid md-cell--12\">\n        <Link to={postFields.prevSlug} className=\"post-suggestion\">\n          <FontIcon\n            forceFontSize\n            forceSize={64}\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_back\n          </FontIcon>\n          <div className=\"headline-container hide-on-mobile\">\n            <h2 className=\"md-body-2 secondary-color\">Previous</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.prevTitle}\n            </h6>\n          </div>\n        </Link>\n        <Link to={postFields.nextSlug} className=\"post-suggestion\">\n          <div className=\"headline-container\">\n            <h2 className=\"md-body-2 secondary-color\">Next</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.nextTitle}\n            </h6>\n          </div>\n          <FontIcon\n            forceFontSize\n            forceSize={64}\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_forward\n          </FontIcon>\n        </Link>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Card from \"react-md/lib/Cards\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Layout from \"../layout\";\nimport UserInfo from \"../components/UserInfo\";\nimport Disqus from \"../components/Disqus\";\nimport PostTags from \"../components/PostTags\";\nimport PostCover from \"../components/PostCover\";\nimport PostInfo from \"../components/PostInfo\";\nimport SocialLinks from \"../components/SocialLinks\";\nimport PostSuggestions from \"../components/PostSuggestions\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./b16-tomorrow-dark.css\";\nimport \"./post.scss\";\n\nexport default class PostTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { mobile } = this.state;\n    const { slug } = this.props.pageContext;\n    const expanded = !mobile;\n    const postOverlapClass = mobile ? \"post-overlap-mobile\" : \"post-overlap\";\n    const postNode = this.props.data.markdownRemark;\n    const post = postNode.frontmatter;\n    if (!post.id) {\n      post.id = slug;\n    }\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID;\n    }\n\n    const coverHeight = mobile ? 180 : 350;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"post-page md-grid md-grid--no-spacing\">\n          <Helmet>\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}${post.id}`} />\n          </Helmet>\n          <SEO postPath={slug} postNode={postNode} postSEO />\n          <PostCover\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName=\"md-grid md-cell--9 post-cover\"\n          />\n          <div\n            className={`md-grid md-cell--9 post-page-contents mobile-fix ${postOverlapClass}`}\n          >\n            <Card className=\"md-grid md-cell md-cell--12 post\">\n              <CardText className=\"post-body\">\n                <h1 className=\"md-display-2 post-header\">{post.title}</h1>\n                <PostInfo postNode={postNode} />\n                <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n              </CardText>\n              <div className=\"post-meta\">\n                <PostTags tags={post.tags} />\n                <SocialLinks\n                  postPath={slug}\n                  postNode={postNode}\n                  mobile={this.state.mobile}\n                />\n              </div>\n            </Card>\n            <UserInfo\n              className=\"md-grid md-cell md-cell--12\"\n              config={config}\n              expanded={expanded}\n            />\n            <Disqus postNode={postNode} expanded={expanded} />\n          </div>\n\n          <PostSuggestions postNode={postNode} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        date\n        category\n        tags\n      }\n      fields {\n        nextTitle\n        nextSlug\n        prevTitle\n        prevSlug\n        slug\n        date\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport path from \"path\";\nimport \"./PostCover.scss\";\n\nclass PostCover extends Component {\n  render() {\n    const { fileEdges, postNode, coverHeight, coverClassName } = this.props;\n    const post = postNode.frontmatter ? postNode.frontmatter : postNode;\n    const coverNodeList = fileEdges.filter(fileNode => {\n      if (fileNode.node.childImageSharp === null) return false;\n\n      if (\n        fileNode.node.absolutePath.indexOf(\n          path.join(\"/static/assets/\", post.cover)\n        ) !== -1\n      )\n        return true;\n\n      return false;\n    });\n\n    if (coverNodeList.length === 1) {\n      return (\n        <Img\n          fluid={coverNodeList[0].node.childImageSharp.fluid}\n          outerWrapperClassName={coverClassName}\n          style={{ height: coverHeight, width: \"100%\" }}\n        />\n      );\n    }\n\n    /* eslint no-undef: \"off\" */\n    const coverURL =\n      post.cover.substring(0, 1) === \"/\"\n        ? __PATH_PREFIX__ + post.cover\n        : post.cover;\n    return (\n      <div\n        style={{\n          backgroundImage: `url(${coverURL})`,\n          height: `${coverHeight}px`\n        }}\n        className={coverClassName}\n      />\n    );\n  }\n}\n\nexport default PostCover;\n","import React, { Component } from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport PostCover from \"./PostCoverComponent\";\n\nclass queryWrapper extends Component {\n  render() {\n    const { postNode, coverHeight, coverClassName } = this.props;\n    return (\n      <StaticQuery\n        query={graphql`\n          query CoverQuery {\n            allFile {\n              edges {\n                node {\n                  id\n                  absolutePath\n                  childImageSharp {\n                    id\n                    resolutions {\n                      base64\n                      tracedSVG\n                      aspectRatio\n                      width\n                      height\n                      src\n                      srcSet\n                      srcWebp\n                      srcSetWebp\n                      originalName\n                    }\n                    internal {\n                      contentDigest\n                      type\n                      owner\n                    }\n                    fluid(maxWidth: 1240) {\n                      ...GatsbyImageSharpFluid\n                      originalName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `}\n        render={data => (\n          <PostCover\n            fileEdges={data.allFile.edges}\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName={coverClassName}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default queryWrapper;\n"],"sourceRoot":""}